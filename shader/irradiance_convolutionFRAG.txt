#version 330 core
out vec4 FragColor;
in vec4 WorldPos;//立方体局部坐标当作法线

uniform samplerCube environmentMap;

const float PI = 3.14159265359;

void main()
{		
	// The world vector acts as the normal of a tangent surface
    // from the origin, aligned to WorldPos. Given this normal, calculate all
    // incoming radiance of the environment. The result of this radiance
    // is the radiance of light coming from -Normal direction, which is what
    // we use in the PBR shader to sample irradiance.
    vec3 N = WorldPos.xyz;
    N = normalize(N);

    vec3 irradiance = vec3(0.0);   
    
    // tangent space calculation from origin point
    vec3 up = abs(N.y) > 0.999 ? vec3(0.0, 0.0, 1.0) : vec3(0.0, 1.0, 0.0);
    vec3 right = normalize(cross(up, N));
    up         = normalize(cross(N, right));
    mat3 TBN = mat3(right,up,N);
    float sampleDelta = 0.025;
    float nrSamples = 0.0;
    for(float phi = 0.0; phi < 2.0 * PI; phi += sampleDelta)
    {
        for(float theta = 0.0; theta < 0.5 * PI; theta += sampleDelta)
        {
            // spherical to cartesian (in tangent space)
            vec3 tangentSample = vec3(sin(theta) * cos(phi),  sin(theta) * sin(phi), cos(theta));
            // tangent space to world
            vec3 sampleVec = TBN * tangentSample; 
            sampleVec = normalize(sampleVec);
            //公式部分 这里RBG32F输入再累加会导致glsl float类型溢出，钳制数值或逐步归一化
            vec3 envColor = texture(environmentMap, sampleVec).rgb;
            envColor = min(envColor, vec3(50.0));
            irradiance += envColor * cos(theta) * sin(theta) * sampleDelta * sampleDelta;
            nrSamples++;
        }
    }

    irradiance = PI * irradiance * (1.0 / (2.0 * PI * 0.5 * PI));
    
    //捕捉溢出数据NaN or inf
    if (any(isnan(irradiance)) || any(isinf(irradiance))) {
     irradiance = vec3(0.0); // Fallback to black or a safe value
     }
    
    FragColor = vec4(irradiance, 1.0);
}